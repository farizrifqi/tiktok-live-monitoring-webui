'use client'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { ScrollArea } from '@/components/ui/scroll-area'
import { useEffect, useRef, useState } from 'react'
import { debounce } from 'lodash'
import { Separator } from '@/components/ui/separator'
import BubblePerson from '../bubble-person'
import BubbleTime from '../bubble-time'
import { useSelector } from 'react-redux'
import { getLimitedComments } from '@/components/selector/logs'
import { LogEntry } from '@/store/logsSlice'
import { AnimatePresence, motion } from 'framer-motion'
import { useVirtualizer } from '@tanstack/react-virtual'
import { RootState } from '@/store'

export default function ChatList() {
  const [list, setList] = useState<LogEntry[]>([])
  const [limit, setLimit] = useState(20)
  const logs = useSelector((state: RootState) =>
    getLimitedComments(state, limit),
  )
  const chatsRef = useRef<LogEntry[]>(logs)

  useEffect(() => {
    chatsRef.current = logs
    console.log('incomming logs', logs.length)
  }, [logs])
  const debouncedUpdateList = useRef(
    debounce(
      () => {
        setList([...chatsRef.current])
      },
      300,
      { maxWait: 1000 },
    ),
  ).current
  useEffect(() => {
    debouncedUpdateList() // Call debounced function
    return () => debouncedUpdateList.cancel() // Clean up on unmount
  }, [logs])

  // Virtualizer
  const parentRef = useRef<HTMLDivElement>(null)
  const rowVirtualizer = useVirtualizer({
    count: list.length,
    getScrollElement: () => parentRef.current,
    estimateSize: () => 50,
    overscan: 10, // Render a few items beyond the visible area
  })

  const handleScroll = () => {
    const scrollElement = parentRef.current
    if (scrollElement) {
      const scrollOffset = scrollElement.scrollTop + scrollElement.clientHeight
      const scrollHeight = scrollElement.scrollHeight
      const bottomReached = scrollOffset >= scrollHeight - 20 // 100px from the bottom
      console.log('hei', { bottomReached })

      if (bottomReached && list.length < logs.length) {
        setLimit(prevLimit => prevLimit + 40) // Increase the limit by 100 more items
      }
    }
  }
  return (
    <Card className='text-sm'>
      <CardHeader>
        <CardTitle>Chats</CardTitle>
      </CardHeader>
      <Separator />
      <CardContent></CardContent>
    </Card>
  )
}
